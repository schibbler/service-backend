#!/usr/bin/env node

const app = require("../src/app")
const bunyan = require("bunyan")
const http = require("http")
const config = require("config")

const log = require("../src/logger")("schibbler-server")
const normalizePort = (portValue) => {
  const port = parseInt(portValue, 10)

  if (isNaN(port)) {
    return portValue
  }

  if (port >= 0) {
    return port
  }

  return false
}

const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

const onListening = () => {
  const addrress = server.address()
  const bind =
    typeof addrress === "string" ? "pipe " + addrress : "port " + addrress.port
  log.info("Server started and Listening on " + bind)
}

const port = normalizePort(config.get("server.port"))
app.set("port", port)

const server = http.createServer(app)
server.listen(port)
server.on("error", onError)
server.on("listening", onListening)
